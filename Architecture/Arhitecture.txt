---------Клиент-серверная многопользовательская система для отслеживания перемещения домашних животных в пространстве и контролем за физической активностью---------

---------Краткое описание системы---------
Система предназначена для отслеживания перемещения домашних животных с помощью Smart-ошейника. 
Smart-ошейник представляет собой устройство по типу фитнес браслетов для людей и включает в себя функции акселерометра и GPS-трекера.
Smart-ошейник снабжен стационарной и неизвлекаемой сим-картой GSM для передачи данных по каналам сотовой связи GPRS/UMTS/LTE.
Клиент, посредством смартфона через приложение регистрируется в системе используя уникальный ID smart-ошейника.
После регистрации у пользователя появляется возможность отслеживать на карте своего питомца, получать данные о его активности,
получать рекомендации от системы относительно питания и ухода за питомцем.
Таким образом в системе могут находится множество пользователей.

---------Выбор архитектуры---------
Для реализации системы выбрана трехуровневая клиент-серверная архитектура, изображенная на приложенном файле scheme.png
Выбор архитектуры обусловлен четырьмя факторами:
	1) Удобство масштабируемости проекта, для использования системы по всему миру в дальнейшем, за счет горизонтального расширения серверов приложений и серверов БД.
	2) Гибкость конфигурирования системы, за счет изолированности уровней друг от друга.
	3) Повышенной безопасностью, т.к. у клиентов нет прямого доступа к БД и присутствует система аккаунтов для разграничения прав пользователей.
	4) Высокая производительность.

---------Компоненты архитектуры и их взаимодействие---------
	1) Клиент-хозяин. 
	   Это UI интерфейс реализованный на мобильном устройстве с Android/IOS, в качестве операционной системы.
	   Приложение клиента-хозяина решает задачи:
		а) демонстрации всех полученных и обработанных данных на сервере приложений в удобном для пользователя виде (графики, таблицы, подсказки).
		б) регистрация новых аккаунтов.
		в) удобный интерфейс пользователя для настройки smart-ошейника.
	2) Smart-ошейник.
	   Это некое IOT-устройство, которое может определять местоположение в пространстве
	   и данные с датчика акселерометра и передавать их клиенту-хозяину(Bluetooth) или серверу приложений(GPRS/UMTS/LTE).
	3) Сервер приложений.
	   Это программный комплекс, решающий задачи:
		а) приема-передачи данных и организация каналов связи в направлениях клиента-хозяина, smart-ошейника, сервера БД.
		б) анализа полученных данных.
		в) ответов на запросы клиента-хозяина.
	4) Сервер БД.
	   Это программный комплекс, решающий задачи:
		а) приема обработанных данных от сервера приложений и запись их в БД.
		б) передача данных из БД к серверу приложений.
	5) База данных.
	   Выполняет функции хранения данных.
	
---------Как архитектура решает проблемы производительности надежности и безопасности---------
	1) Производительность системы обусловлена тем, что большая часть бизнес логики перенесена на сервер приложений. Там происходят все основные вычисления и анализ данных. 
	   В двух-уровневой архитектуре задача вычислений и анализа данных легла бы на устройство клиента, производительность которого может быть в сотни раз хуже сервера приложений.
	   Также в двух-уровневой системе работа с БД производилась бы напрямую от клиента к БД, что могло бы сильно нагрузить БД в случае большого количества пользователей системы.
	2) Надежность системы достигается разграничением функций между компонентами архитектуры и возможностью их резервирования.
	3) Проблемы безопасности решаются централизованной системой аккаунтов настроенной на сервере приложений, а также уникальностью ID каждого smart-ошейника.




